<?phpnamespace App\Controller;use App\Entity\AccountsCompanies;use App\Entity\Client;use App\Entity\Clients;use App\Entity\Companies;use App\Entity\Company;use App\Entity\CompanyAccounts;use App\Entity\CompanyClients;use App\Entity\CompanyServices;use App\Entity\Event;use App\Entity\Message;use App\Entity\Service;use App\Entity\ServiceProviders;use App\Entity\Services;use App\Entity\ServicesProviders;use App\Forms\AddCompany;use App\Repository\NoteRepository;use App\Repository\RequestRepository;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\Routing\Annotation\Route;class CompaniesController extends GlobalController {    /**     * @Route("/companies/management", name="index_companies", methods={"GET", "POST"})     */    public function index(Request $request){        if(!$this->account){            return $this->redirectToRoute("account_login");        }        $company = new Company();        $form = $this->createForm(AddCompany::class, $company);        $form->handleRequest($request);        if($form->isSubmitted() && $form->isValid()){           $this->company_service->saveCompany($company);           $this->addFlash('success', 'Компанията е създадена успешно!');           return $this->redirectToRoute("edit_company", ['slug' => $company->getSlug()]);        }        $paths = $this->service->paths("Компании");        $menu = ['view' => 'companies', 'active' => 'index'];        return $this->render("/companies/management.html.twig", [            'paths' => $paths,            'menu' => $menu,            'form' => $form->createView(),        ]);    }    /**     * @Route("/company/{slug}", name="company_view", methods={"GET", "POST"})     * @param Request $request     * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response     */    public function company($slug)    {        if (!$this->account) {            return $this->redirectToRoute("account_login");        }        $info = $this->company_service->companyAccess($slug, false);        $company = $info->getCompany();        $staffs = $this->getDoctrine()->getRepository("App:CompanyAccounts")->countCompanyAccounts($company);        $services = $this->getDoctrine()->getRepository("App:Service")->countCompanyServices($company);        $clients = $this->getDoctrine()->getRepository("App:Client")->countCompanyClients($company);        $events = $this->getDoctrine()->getRepository("App:Event")->countEventsByCompany($company);        $my_events = $this->getDoctrine()->getRepository("App:Event")->getAccountTodayEvents($company,  $this->account);        $paths = $this->service->paths("Табло,". $company->getName());        $menu = ['view' => 'companies', 'active' => 'company_view'];        return $this->render("companies/company.html.twig", [            'paths' => $paths,            'menu' => $menu,            'company' => $company,            'staffs' => $staffs,            'services' => $services,            'clients' => $clients,            'events' => $events,            'slug' => $company->getSlug(),            'my_events' => $my_events,            'info' => $info        ]);    }    /**     * @Route("company/{slug}/edit", name="edit_company", methods={"POST", "GET"})     */    public function company_edit($slug, Request $request){      if(!$this->account){          return $this->redirectToRoute("account_login");      }      $info = $this->company_service->companyAccess($slug);      if(!$this->account->getIsMain()){          $this->addFlash('danger', 'Достъп отказан! Не разполагате с необходимите права за тази операция');          return $this->redirectToRoute("index_companies");      }      $company = $info->getCompany();      $working_time = $company->getWorkingTime() ? json_decode($company->getWorkingTime()) : [];      $form = $this->createForm(AddCompany::class, $company);      $form->handleRequest($request);      if($form->isSubmitted() && $form->isValid()){          $company->setWorkingTime($this->company_service->createWorkingTime());          $this->service->saveData($company);          $this->addFlash('success', 'Информацията за компанията е обновена успешно.');          return $this->redirectToRoute("index_companies");      }      $paths = $this->service->paths("Табло, Редактиране на компания");      $menu = ['view' => 'companies', 'active' => 'index'];      return $this->render("companies/company_edit.html.twig", [          'paths' => $paths,          'menu' => $menu,          'form' => $form->createView(),          'edit' => true,          'working_time' => $working_time      ]);    }    /**     * @Route("/company/{slug}/remove", name="remove_company", methods={"POST", "GET"})     */    public function remove_company($slug){        if(!$this->account){            return $this->redirectToRoute("account_login");        }        $info = $this->company_service->companyAccess($slug);        if(!$this->account->getIsMain()){            $this->addFlash('danger', 'Достъп отказан! Не разполагате с необходимите права за тази операция');            return $this->redirectToRoute("index_companies");        }        #remove events        $this->getDoctrine()->getRepository(Event::class)->deleteEvents(false, false, $info->getCompany(), false);        #remove clients        $this->getDoctrine()->getRepository(Client::class)->removeClients($info->getCompany());        #remove providers        $this->getDoctrine()->getRepository(ServiceProviders::class)->removeAllProviders($info->getCompany());        #delete services        $this->getDoctrine()->getRepository(Service::class)->removeCompanyServices($info->getCompany());        #delete accounts        $accounts = $this->getDoctrine()->getRepository(CompanyAccounts::class)->findBy(['company' => $info->getCompany()]);        if($accounts){            foreach($accounts as $account){                $this->service->deleteData($account);                $companies = $this->getDoctrine()->getRepository(CompanyAccounts::class)->findBy(['account' => $account->getAccount()]);                if(!$companies){                    #clear messages                    $this->getDoctrine()->getRepository(Message::class)->deleteAllAccountMessages($account->getAccount());                    if(!$account->getAccount()->getIsMain()){                        $this->getDoctrine()->getRepository(\App\Entity\Note::class)->clearNotes($account->getAccount());                        $this->getDoctrine()->getRepository(\App\Entity\Request::class)->clearRequest($account->getAccount());                        $this->service->deleteData($account->getAccount());                    }                }            }        }        $this->service->deleteData($info->getCompany());        $this->addFlash('success', 'Компанията е изтрита успешно!');        return $this->redirectToRoute('index_companies');    }}