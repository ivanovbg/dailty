<?phpnamespace App\Services;use App\Entity\Account;use App\Entity\Client;use App\Entity\Company;use App\Entity\CompanyAccounts;use App\Entity\Message;use App\Entity\Messages;use App\Entity\Note;use App\Entity\ServiceProviders;use Psr\Container\ContainerInterface;use Symfony\Component\HttpFoundation\Cookie;use Symfony\Component\HttpFoundation\JsonResponse;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Validator\Constraints\Date;use Symfony\Component\Validator\Constraints\DateTime;class Ajax extends Service {    public function __construct(ContainerInterface $container, \Twig_Environment $twig, RouterInterface $router)    {        parent::__construct($container, $twig, $router);        $this->ajaxOnly();    }    private function ajaxOnly(){        if(!$this->isAjax){            echo "Ajax request only!";            exit;        }    }    public function login(){        $response['status'] = true;        if($this->container->get(Accounts::class)->getAccount()){            $response['msg'] = "Вие вече сте логнат в системата!";            $response['status'] = false;            return new JsonResponse($response);        }        $email = $this->request->request->get('email');        $password = md5($this->request->request->get('password'));        $remember = $this->request->request->getInt('remember') ? true : false;        if(!$email || !filter_var($email, FILTER_VALIDATE_EMAIL)){            $response['status'] = false;            $response['msg'] = "Невалиден емейл адрес!";        }        if($response['status']){            $account = $this->entityManager->getRepository(Account::class)                    ->findOneBy(['email' => $email, 'is_active' => 1]);                        if(!$account || ($account->getPassword() != $password)){                $response['status'] = false;                $response['msg'] = "Невалиден емейл адрес и/или парола";            }else{                #create session                $this->session->set('account_id', $account->getId());                #set cookie(remember)                if($remember) {                    $cookie_date = new \DateTime();                    $cookie_value = sha1($this->settings->account_cookie_hash) . "_" . base64_encode($account->getId());                    $this->setCookie('account_id', $cookie_value, $cookie_date->modify("+2 day"));                }            }        }        return new JsonResponse($response);    }    public function company_select(){        $response['status'] = true;        if(!$this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Вие не сте логнат!";        }        if($response['status']){            $company = $this->entityManager->getRepository(Company::class)->findOneBy(['id' => $this->request->get('company_id')]);            if($company && $this->entityManager->getRepository(CompanyAccounts::class)->findOneBy(['company' => $company, 'account' => $this->container->get(Accounts::class)->getAccount()])){                $this->setCookie("selected_company", $company->getId(), time()+86400);            } else{                $response['status'] = false;                $response['msg'] = "Грешка";            }        }        return new JsonResponse($response);    }    function check_account_data(){        $response['status'] = true;        if(!$this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;        }        return new JsonResponse($response);    }    function delete_messages(){        $response['status'] = true;        if(!$this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Не сте логнат";        }        $messages = $this->request->request->get("messages");        $response['removed'] = [];        if($response['status'] && $messages){            foreach($messages as $message){                if($msg = $this->entityManager->getRepository(Message::class)->findOneBy(['id' => $message])){                    if($msg->getReceiver() == $this->container->get(Accounts::class)->getAccount()){                        $msg->setReceiverDelete(1);                        $response['removed'][] = $msg->getId();                        $this->entityManager->persist($msg);                        $this->entityManager->flush();                    } elseif($msg->getSender() == $this->container->get(Accounts::class)->getAccount()){                        $msg->setSenderDelete(1);                        $this->entityManager->persist($msg);                        $this->entityManager->flush();                        $response['removed'][] = $msg->getId();                    }                }            }        }        return new JsonResponse($response);    }    function forgot_password(){        $response['status'] = true;        if($this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Вие сте логнат!";        }        $email = $this->request->request->get("email");        if($email && $response['status']){            $account = $this->entityManager->getRepository(Account::class)->findOneBy(['email' => $email, 'is_active' => 1]);            if(!$account){                $response['status'] = false;                $response['msg'] = "Грешен емейл адрес. Моля, опитайте отново.";            }            if($response['status']){                //clear request                $this->entityManager->getRepository(\App\Entity\Request::class)->forgotPasswordClearNotExpired($account);                $now = new \DateTime();                $key = $this->generateRequestKey();                $request = new \App\Entity\Request();                $request->setType(1);                $request->setAccount($account);                $request->setRequestFrom($account);                $request->setDateExpired($now->modify("+ 2 days"));                $request->setDateCreated($now);                $request->setRequestKey($key);                $this->saveData($request);                $url = $this->settings->url."/account/forgot-password/".$key;                $this->container->get(Mails::class)->sendMail("Забравена парола", $account->getEmail(), ['url' => $url], 'forgot_password');                $response['msg'] = "На посоченият емейл адрес е изпратен линк за възстановяване на паролата.";            }        }        return new JsonResponse($response);    }    function new_password(){        $response['status']= true;        if($this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Вие сте логнат";        }        if($response['status']){            $password = $this->request->request->get("password");            $password_repeat = $this->request->request->get("password_repeat");            $request_key = $this->request->request->get("request_key");            $request = $this->entityManager->getRepository(\App\Entity\Request::class)->forgotPasswordRequest($request_key);            if(!$request_key || !$request){                $response['status'] = false;                $response['msg'] = "Грешка, моля опитайте отново";            }            if((strlen($password)<8 || $password != $password_repeat) && $response['status']){                $response['status'] = false;                if(strlen($password)<8)                    $response['msg'] = "Паролата трябва да съдържа поне 8 символа";                if($password != $password_repeat && !isset($response['msg']))                    $response['msg'] = "Двете пароли не съвпадат";            }        }        if($response['status']){            $account = $this->entityManager->getRepository(\App\Entity\Account::class)->findOneBy(['id' =>$request->getAccount()->getId()]);            $account->setPassword(md5($password));            $this->saveData($account);            $request->setDateExpired(new \DateTime());            $this->saveData($request);            $response['msg'] = "Паролата е променена успешно. След няколко секунди ще бъдете пренасочени към странцата за вход.";            $this->container->get(Mails::class)->sendMail("Променена парола", $account->getEmail(), [], 'changed_password');        }        return new JsonResponse($response);    }    public function add_service_providers(){        $response['status'] = true;        if(!$this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Вие не сте логнат";        }        if($response['status']) {            $service = $this->request->request->get("service");            $accounts = $this->request->request->get("accounts");            $account = $this->request->request->get("account");            $company = $this->request->request->get("company");            $account = $this->entityManager->getRepository(Account::class)->findOneBy(['id' => $account]);            $company = $this->entityManager->getRepository(Company::class)->findOneBy(['id' => $company]);            if (!$account || !$company) {                $response['status'] = false;            }            if ($response['status']) {                $access = $this->entityManager->getRepository(CompanyAccounts::class)->findOneBy(['company' => $company, 'account' => $account]);                if (!$access || !$access->getServiceAccess()) {                    $response['status'] = false;                } else {                    $service = $this->entityManager->getRepository(\App\Entity\Service::class)->findOneBy(['id' => $service]);                    if ($service) {                        foreach ($accounts as $account) {                            $account = $this->entityManager->getRepository(Account::class)->findOneBy(['id' => $account]);                            if ($account) {                                $sv = new ServiceProviders();                                $sv->setAccount($account);                                $sv->setService($service);                                $this->saveData($sv);                            }                        }                    }                }            }        }        return new JsonResponse($response);    }    public function send_email_to_client(){        $response['status'] = true;        if(!$this->container->get(Accounts::class)->getAccount()){            $response['status'] = false;            $response['msg'] = "Вие сте логнат";        }        $subject = $this->request->request->get("subject");        $message = $this->request->request->get("message");        $company = $this->request->request->getInt("company");        $account = $this->request->request->getInt("account");        $client = $this->request->request->getInt("client_id");        if($response['status'] && (!$subject || !$message || !$company || !$account || !$client)){            $response['status'] = false;            $response['msg'] = "Нещо се обърка. Моля, опитайте отново";        }        if($response['status']){               $account = $this->entityManager->getRepository(CompanyAccounts::class)->checkAccountByIDandCompanyId($company, $account);               $client  = $this->entityManager->getRepository(Client::class)->findOneBy(['company' => $account->getCompany(), 'id' => $client]);               if($account && $client){                   $response['status'] = true;                   $data['company_name'] = $account->getCompany()->getName();                   $this->container->get(Mails::class)->sendEmailToClient($account->getAccount(), $client, $account->getCompany(), $subject, $message);               }else{                   $response['status'] = false;                   $response['msg'] = "Нещо се обърка. Моля, опитайте отново";               }        }        return new JsonResponse($response);    }    function add_note(){        if(!($account = $this->container->get(Accounts::class)->getAccount())){            $response['status'] = false;            $response['msg'] = "Вие сте логнат";        }        $title = $this->request->get("title");        $content = $this->request->get("content");        $id = $this->request->get("id");        $note = new Note();        if($id && $check_note =$this->entityManager->getRepository("App:Note")->findOneBy(['id' => $id, 'account' => $account])){            $note = $check_note;        }        $note->setTitle($title);        $note->setAccount($account);        $note->setContent($content);        if(!$id || !$check_note){          $note->setDateAdded(new \DateTime());        }        $this->saveData($note);        $response['status'] = true;        $response['msg'] = "Успешно създадена бележка!";        return new JsonResponse($response);    }    function get_note(){        if(!($account = $this->container->get(Accounts::class)->getAccount())){            $response['status'] = false;            $response['msg'] = "Вие сте логнат";        }        $id = $this->request->get("id");        $note = $this->entityManager->getRepository(Note::class)->findOneBy(['id' => $id, 'account' => $account]);        if($note){            $response['status'] = true;            $response['note'] = ['title' => $note->getTitle(), 'content' => $note->getContent()];        }else{            $response['status'] = false;        }        return new JsonResponse($response);    }    function delete_note(){        $response['status'] = false;        if(!($account = $this->container->get(Accounts::class)->getAccount())){            $response['status'] = false;            $response['msg'] = "Не сте логнат!";        }        $id = $this->request->get("id");        $note = $this->entityManager->getRepository(Note::class)->findOneBy(['id' => $id, 'account' => $account]);        if($note){            $this->deleteData($note);            $response['status'] = true;            $response['msg'] = "Бележката е изтрита успешно!";        }else{            $response['status'] = false;        }        return new JsonResponse($response);    }}