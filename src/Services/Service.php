<?phpnamespace App\Services;use App\Entity\Request;use App\Settings\Settings;use Psr\Container\ContainerInterface;use Symfony\Component\HttpFoundation\Cookie;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Yaml\Yaml;class Service{    public $container, $request, $isAjax, $entityManager, $response, $settings, $twig, $session, $router;    public function __construct(ContainerInterface $container, \Twig_Environment $twig, RouterInterface $router){        $this->container = $container;        $this->request = $this->container->get("request_stack")->getCurrentRequest();        $this->isAjax = $this->container->get("request_stack")->getCurrentRequest()->isXmlHttpRequest();        $this->entityManager = $this->container->get('doctrine')->getManager();        $this->response  = new Response();        $this->twig = $twig;        $this->settings = $this->settings();        $this->session = $this->container->get('session');        $this->flashbag = $this->session->getFlashBag();        $this->router = $router;    }    public function pages($data, $limit = 10){        $paginator = $this->container->get("knp_paginator");        $paginator = $paginator->paginate(            $data,            $this->request->query->getInt('page', 1),            $this->request->query->getInt('limit', $limit)        );        return $paginator;    }    public function saveData($data){        $this->entityManager->persist($data);        $this->entityManager->flush();    }    public function deleteData($data){        $this->entityManager->remove($data);        $this->entityManager->flush();    }    public function paths($data = false){        $paths[] = ['title' => 'Начало'];        if($data){            $data = explode(',', $data);            foreach($data as $path){                $paths[] = ['title' => $path];            }        }        return $paths;    }    public function assignGlobal($variable_name, $variable_value){        $this->twig->addGlobal($variable_name, $variable_value);    }    public function settings(){        $dir = substr(dirname(__FILE__),0,-13);        $settings = Yaml::parseFile($dir.'/config/settings.yaml');        $this->twig->addGlobal("settings", (object)$settings);        return (object)$settings;    }    public function getCookie($cookie_name){        $cookie_value = false;        if($this->request->cookies->has($cookie_name)){            $cookie_value = $this->request->cookies->get($cookie_name);        }        return $cookie_value;    }    public function setCookie($cookie_name, $cookie_value, $time){       $cookie = new Cookie($cookie_name, $cookie_value, $time, '/');       $this->response->headers->setCookie($cookie);       $this->response->send();    }    public function clearCookie($cookie_name){        $this->response->headers->clearCookie($cookie_name);        $this->response->send();    }    public function generateRequestKey(){        $key = md5(base64_encode(random_bytes(10)));        if($this->entityManager->getRepository(Request::class)->findOneBy(['request_key' => $key])){            $this->generateRequestKey();        }        return $key;    }    public function redirect($url){        $response = new RedirectResponse($url);        $response->send();        exit;    }    public function translateMonths(){        $months = [            '1' => 'Януари',            '2' => 'Февруари',            '3' => 'Март',            '4' => 'Април',            '5' => 'Май',            '6' => 'Юни',            '7' => 'Юли',            '8' => 'Август',            '9' => 'Септември',            '10' => 'Октомври',            '11' => 'Ноември',            '12' => 'Декември'        ];        return $months;    }}